#!/usr/bin/env python

import os
import sys
import struct
import argparse
from terminaltables import AsciiTable

############## INTERNAL VARIABLES ##############
num_core = 0
num_skt = 0
num_core_skt = 0

num_pmu = None

############## MSR REGISTRIES ##############

# Enable FIXED and PMU comuters
IA32_PERF_GLOBAL_CTRL = 0x38F
CONF_ENABLE_FIXED = 0x700000000
CONF_ENABLE_PMU = 0xFF

# FIXED configuration (instructions retired, CLK_CURR, CLK_REF)
IA32_FIXED_CTR_CTRL = 0x38D
CONF_START_FIXED = 0x333

# PMU configuration
IA32_PERFEVTSELX_ADDR = [0x186, 0x187, 0x188, 0x189, 0x18A, 0x18B, 0x18C, 0x18D]

# FIXED perf
IA32_FIXED_CTRX = [0x309, 0x30a, 0x30b]

# PMU perf
IA32_PMCX = [0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8]
CONF_EN_OS_USR = 0x430000

############## PMU descriptions ##############
cmask_desc = "When this field is not zero, a logical processor compares this mask to the events \
              count of the detected microarchitectural condition during a single cycle. \
              If the event count is greater than or equal to this mask, the counter is incremented by one. \
              Otherwise the counter is not incremented."

inv_desc = "When set, inverts the counter-mask (CMASK) comparison, so that both greater \
             than or equal to and less than comparisons can be made \
             (off: greater than or equal; on: less than). \
             Note if counter-mask is programmed to zero, INV flag is ignored."

en_desc = "When set, performance counting is enabled in the corresponding \
           performance-monitoring counter; when clear, the corresponding counter is disabled."

int_desc = "When set, the logical processor generates an exception \
            through its local APIC on counter overflow."

pc_desc = "When set, the logical processor toggles the PMi pins and increments the \
           counter when performance-monitoring events occur; when clear, \
           the processor toggles the PMi pins when the counter overflows. \
           The toggling of a pin is defined as assertion of the pin \
           for a single bus clock followed by deassertion."

edge_desc = "Enables (when set) edge detection of the selected microarchitectural \
             condition. The logical processor counts the number of deasserted to asserted transitions \
             for any condition that can be expressed by the other fields. \
             The mechanism does not permit back-to-back assertions to be distinguished. \
             This mechanism allows software to measure not only the fraction of time spent in a particular state, \
             but also the average length of time spent in such a state \
             (for example, the time spent waiting for an interrupt to be serviced)."

os_desc = "Specifies that the selected microarchitectural condition is counted \
           when the logical processor is operating at privilege level 0. \
           This flag can be used with the USR flag."

user_desc = "Specifies that the selected microarchitectural condition is counted when \
            the logical processor is operating at privilege levels 1, 2 or 3. \
            This flag can be used with the OS flag."

umask_desc = "These bits qualify the condition that the selected event \
              logic unit detects. Valid UMASK values for each event logic unit are specific to the unit. \
              For each architectural performance event, \
              its corresponding UMASK value defines a specific microarchitectural condition."

event_desc = "Selects the event logic unit used to detect microarchitectural conditions. \
              The set of values for this field is defined architecturally; \
              each value corresponds to an event logic unit for use with an architectural performance event. \
              The number of architectural events is queried using CPUID.0AH:EAX. \
              A processor may support only a subset of pre-defined values."


##################################################

# Read a MSR registry
def read_msr(msr, cpu):
    f = os.open('/dev/cpu/%d/msr' % (cpu,), os.O_RDONLY)
    os.lseek(f, msr, os.SEEK_SET)
    val = struct.unpack('Q', os.read(f, 8))[0]
    os.close(f)
    return val

# Write a MSR registry
def write_msr(msr, val, cpu):
    f = os.open('/dev/cpu/%d/msr' % (cpu,), os.O_WRONLY)
    os.lseek(f, msr, os.SEEK_SET)
    os.write(f, struct.pack('Q', val))
    os.close(f)

# Check requisites of the system
def check_requirements():
    # Check root permission
    uid = os.getuid()
    if uid != 0:
        sys.stderr.write("[WARNING] Need to be root to execute this software!\n")
        exit(-1)

    # Check if MSR module is loaded
    if not os.path.exists("/dev/cpu/0/msr"):
        sys.stderr.write("[WARNING] MSR module is not loaded!\n")
        exit(-2)

def hyperthreading_enabled():
    fd = open('/proc/cpuinfo')
    cpuinfo = dict(map(str.strip, line.split(':')) for line in fd if ':' in line)
    fd.close()
    return cpuinfo['siblings'] != cpuinfo['cpu cores']

# Default initial configuration
def init_config():
    global num_core, num_skt, num_core_skt, num_pmu

    # Read the number of virtual CPUs and sockets
    with open("/proc/cpuinfo", "r") as f:
        conf_lines = f.readlines()
        for cl in conf_lines:
            if "physical id" in cl:
                num_core += 1
                skt = cl.replace(" ", "").split(":")[1]
                if (int(skt)+1) > num_skt:
                    num_skt += 1
    num_core_skt = num_core / num_skt

    ht = hyperthreading_enabled()
    if ht is True:
        num_pmu = 4
    else:
        num_pmu = 8
    
def read_enable_fixed():
    table_data = []

    labels = ["ENABLE FIXED COUNTERS"]
    labels.append("Fixed 0")
    labels.append("Fixed 1")
    labels.append("Fixed 2")
    table_data.append(labels)

    for c in range(num_core):
        reg_perf_global_ctrl = read_msr(IA32_PERF_GLOBAL_CTRL, c)

        conf = ["Core " + str(c)]
        
        enable_fixed_0 = (reg_perf_global_ctrl >> 32) & 1
        if enable_fixed_0 == 1:
            conf.append("ON")
        else:
            conf.append("OFF")
            
        enable_fixed_1 = (reg_perf_global_ctrl >> 33) & 1
        if enable_fixed_1 == 1:
            conf.append("ON")
        else:
            conf.append("OFF")
            
        enable_fixed_2 = (reg_perf_global_ctrl >> 34) & 1
        if enable_fixed_2 == 1:
            conf.append("ON")
        else:
            conf.append("OFF")
        
        table_data.append(conf)
        
    table = AsciiTable(table_data)
    print table.table

def read_enable_pmu():
    table_data = []

    labels = ["ENABLE PMU COUNTERS"]
    for i in range(num_pmu):
        labels.append("PMU " + str(i))
    table_data.append(labels)

    for c in range(num_core):
        reg_perf_global_ctrl = read_msr(IA32_PERF_GLOBAL_CTRL, c)

        conf = ["Core " + str(c)]
        
        for j in range(num_pmu):
            enable_pmu = reg_perf_global_ctrl & 1
            if enable_pmu == 1:
                conf.append("ON")
            else:
                conf.append("OFF")
        table_data.append(conf)
        
    table = AsciiTable(table_data)
    print table.table

def read_conf_fixed():
    table_data = []

    labels = ["FIXED CONF"]
    labels.append("PMI 0")
    labels.append("ANY 0")
    labels.append("EN 0")
    labels.append("PMI 1")
    labels.append("ANY 1")
    labels.append("EN 1")
    labels.append("PMI 2")
    labels.append("ANY 2")
    labels.append("EN 2")

    table_data.append(labels)

    for c in range(num_core):
        reg_fixed_ctr_ctrl = read_msr(IA32_FIXED_CTR_CTRL, c)

        conf = ["Core " + str(c)]

        PMI_0 = "ON" if ((reg_fixed_ctr_ctrl >> 3) & 0x1) == 1 else "OFF"
        conf.append(PMI_0)
        ANY_0 = "ON" if ((reg_fixed_ctr_ctrl >> 2) & 0x1) == 1 else "OFF"
        conf.append(ANY_0)
        EN_0 = reg_fixed_ctr_ctrl & 0x3
        if EN_0 == 0:
            conf.append("OFF")
        elif EN_0 == 1:
            conf.append("OS")
        elif EN_0 == 2:
            conf.append("User")
        elif EN_0 == 3:
            conf.append("ALL RINGS")

        PMI_1 = "ON" if ((reg_fixed_ctr_ctrl >> 7) & 0x1) == 1 else "OFF"
        conf.append(PMI_1)
        ANY_1 = "ON" if ((reg_fixed_ctr_ctrl >> 6) & 0x1) == 1 else "OFF"
        conf.append(ANY_1)
        EN_1 = (reg_fixed_ctr_ctrl >> 4) & 0x3
        if EN_1 == 0:
            conf.append("OFF")
        elif EN_1 == 1:
            conf.append("OS")
        elif EN_1 == 2:
            conf.append("User")
        elif EN_1 == 3:
            conf.append("ALL RINGS")

        PMI_2 = "ON" if ((reg_fixed_ctr_ctrl >> 11) & 0x1) == 1 else "OFF"
        conf.append(PMI_2)
        ANY_2 = "ON" if ((reg_fixed_ctr_ctrl >> 10) & 0x1) == 1 else "OFF"
        conf.append(ANY_2)
        EN_2 = (reg_fixed_ctr_ctrl >> 8) & 0x3
        if EN_2 == 0:
            conf.append("OFF")
        elif EN_2 == 1:
            conf.append("OS")
        elif EN_2 == 2:
            conf.append("User")
        elif EN_2 == 3:
            conf.append("ALL RINGS")
              
        table_data.append(conf)

    table = AsciiTable(table_data)
    print table.table

def read_conf_pmu():
    for c in range(num_core):
        table_data = []

        labels = ["Core " + str(c)]
        labels.append("CMASK")
        labels.append("INV")
        labels.append("EN")
        labels.append("ANY")
        labels.append("INT")
        labels.append("PC")
        labels.append("EDGE")
        labels.append("OS")
        labels.append("USR")
        labels.append("UMASK")
        labels.append("EVENT")
        table_data.append(labels)

        for j in range(num_pmu):
            reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)

            conf = ["PMU " + str(j)]

            CMASK = (reg_ia32_perfevtselx >> 24) & 0xFF
            conf.append(hex(CMASK))

            INV = "ON" if ((reg_ia32_perfevtselx >> 23) & 0x1) == 1 else "OFF"
            conf.append(INV)

            EN = "ON" if ((reg_ia32_perfevtselx >> 22) & 0x1) == 1 else "OFF"
            conf.append(EN)

            ANY = "ON" if ((reg_ia32_perfevtselx >> 21) & 0x1) == 1 else "OFF"
            conf.append(ANY)

            INT = "ON" if ((reg_ia32_perfevtselx >> 20) & 0x1) == 1 else "OFF"
            conf.append(INT)

            PC = "ON" if ((reg_ia32_perfevtselx >> 19) & 0x1) == 1 else "OFF"
            conf.append(PC)

            E = "ON" if ((reg_ia32_perfevtselx >> 18) & 0x1) == 1 else "OFF"
            conf.append(E)

            OS = "ON" if ((reg_ia32_perfevtselx >> 17) & 0x1) == 1 else "OFF"
            conf.append(OS)

            USR = "ON" if ((reg_ia32_perfevtselx >> 16) & 0x1) == 1 else "OFF"
            conf.append(USR)

            UMASK = (reg_ia32_perfevtselx >> 8) & 0xFF
            conf.append(hex(UMASK))

            EVENT = reg_ia32_perfevtselx & 0xFF
            conf.append(hex(EVENT))

            table_data.append(conf)
        
        table = AsciiTable(table_data)
        print table.table

def read_perf_fixed():
    table_data = []

    labels = ["PERF"]
    labels.append("Fixed 0")
    labels.append("Fixed 1")
    labels.append("Fixed 2")
    table_data.append(labels)

    for c in range(num_core):
        perf = ["Core " + str(c)]
        perf.append(read_msr(IA32_FIXED_CTRX[0], c))
        perf.append(read_msr(IA32_FIXED_CTRX[1], c))
        perf.append(read_msr(IA32_FIXED_CTRX[2], c))
        table_data.append(perf)

    table = AsciiTable(table_data)
    print table.table

def read_perf_pmu():
    table_data = []

    labels = ["PERF"]
    for i in range(num_pmu):
        labels.append("PMU " + str(i))
    table_data.append(labels)

    for c in range(num_core):
        perf = ["Core " + str(c)]
        for j in range(num_pmu):
            perf.append(read_msr(IA32_PMCX[j], c))
        table_data.append(perf)

    table = AsciiTable(table_data)
    print table.table


def reset():
    # Reset enable FIXED and PMU
    for c in range(num_core):
        reg_perf_global_ctrl = read_msr(IA32_PERF_GLOBAL_CTRL, c)
        reg_perf_global_ctrl = reg_perf_global_ctrl & ~CONF_ENABLE_FIXED
        reg_perf_global_ctrl = reg_perf_global_ctrl & ~CONF_ENABLE_PMU
        write_msr(IA32_PERF_GLOBAL_CTRL, reg_perf_global_ctrl, c)

    # Reset FIXED conf
    for c in range(num_core):
        reg_fixed_ctr_ctrl = read_msr(IA32_FIXED_CTR_CTRL, c)
        reg_fixed_ctr_ctrl = reg_fixed_ctr_ctrl & ~CONF_START_FIXED
        write_msr(IA32_FIXED_CTR_CTRL, reg_fixed_ctr_ctrl, c)

    # Reset PMU conf
    for c in range(num_core):
        for j in range(num_pmu):
            reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
            reg_ia32_perfevtselx = reg_ia32_perfevtselx & ~0xFFFFFFFF
            write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)

    # Reset FIXED perf
    for c in range(num_core):
        write_msr(IA32_FIXED_CTRX[0], 0x0, c)
        write_msr(IA32_FIXED_CTRX[1], 0x0, c)
        write_msr(IA32_FIXED_CTRX[2], 0x0, c)

    # Reset PMU perf
    for c in range(num_core):
        for j in range(num_pmu):
            write_msr(IA32_PMCX[j], 0x0, c)

def is_hex(s):
    try:
        int(s, 16)
        return True
    except:
        return False

def is_int(s):
    try:
        print s
        int(s, 10)
        return True
    except:
        return False

# Main
if __name__ == "__main__":
    check_requirements()

    init_config()

    core = [False] * num_core
    fixed_counter = None
    pmu_counter = None
    pmu = None
    cmask = None
    inv = None
    en = None
    _any = None
    _int = None
    pc = None
    edge = None
    _os = None
    user = None
    umask = None
    event = None

    # Parse arguments
    parser = argparse.ArgumentParser(description='Tool for PMU setting')
    parser.add_argument('-c', '--cpu', help='Set PMU for core $C [Default all]', required=False, type=int, choices=xrange(0, num_core-1))
    parser.add_argument('-ef', '--enable-fix', help='Enable fixed counter', required=False, action='store_true')
    parser.add_argument('-df', '--disable-fix', help='Disable fixed counter', required=False, action='store_true')
    parser.add_argument('-ep', '--enable-pmu', help='Enable PMU counter', required=False, action='store_true')
    parser.add_argument('-dp', '--disable-pmu', help='Disable PMU counter', required=False, action='store_true')
    parser.add_argument('-a', '--any', help='Set any thread configuration for fixed counters', required=False, type=str, choices=["on", "off"])
    parser.add_argument('-p', '--pmu', help='Select the PMU registry to configure', required=False, type=int, choices=xrange(0, num_pmu))
    parser.add_argument('-cm', '--cmask', help='Set Counter umask - ' + cmask_desc, required=False, type=str)
    parser.add_argument('-inv', '--inv', help='Set Invert counter mask - ' + inv_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-en', '--en', help='Set enable counter - ' + en_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-i', '--int', help='Set APIC interrupt enable - ' + int_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-pc', '--pc', help='Set pin control - ' + pc_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-e', '--edge', help='Set edge detect - ' + edge_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-o', '--os', help='Set operating system mode - ' + os_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-u', '--user', help='Set user mode - ' + user_desc, required=False, type=str, choices=["on", "off"])
    parser.add_argument('-um', '--umask', help='Set umask - ' + umask_desc, required=False, type=str)
    parser.add_argument('-ev', '--event', help='Set event - ' + event_desc, required=False, type=str)
    parser.add_argument('-r', '--reset', help='Reset PMU and fixed counters', required=False, action='store_true')
    args = parser.parse_args()
    
    # Argument: print log and reset
    if len(sys.argv) == 1:
        read_enable_fixed()
        read_enable_pmu()
        read_conf_fixed()
        read_conf_pmu()
        read_perf_fixed()
        read_perf_pmu()
        sys.exit(1)
    elif args.reset:
        reset()
        sys.exit(1)

    # Argument: PMU number
    if args.pmu is not None:
        if args.pmu >= num_pmu or args.pmu < 0:
            sys.stderr.write("[ERROR] PMU registries ranged from 1 to " + str(num_pmu) + "!\n")
            sys.exit(-1)
        if args.event is None or args.umask is None:
            sys.stderr.write("[ERROR] Need to be specify a PMU event and a PMU umask!\n")
            sys.exit(-1)
    
    # Argument: CPU number
    if args.cpu is not None:
        core[args.cpu] = True
    else:
        core = [True] * num_core
    
    # Argument: enable fixed counters
    if args.enable_fix is True:
        fixed_counter = True
    if args.disable_fix is True:
        fixed_counter = False

    # Argument: enable PMUs
    if args.enable_pmu is True:
        pmu_counter = True
    elif args.disable_pmu is True:
        pmu_counter = False

    # Argument: PMU number
    if args.pmu is not None:
        pmu = args.pmu

    # Argument: cmask
    if args.cmask is not None:
        if is_hex(args.cmask):
            cmask = int(args.cmask, 16)
        elif is_int(args.cmask):
            cmask = int(args.cmask, 10)
        else:
            sys.stderr.write("[WARNING] cmask: " + str(args.cmask) + " is not a number!\n")
            exit(-1)

    # Argument: inv
    if args.inv is not None:
        inv = 1 if args.inv in "on" else 0

    # Argument: en
    if args.en is not None:
        en = 1 if args.en in "on" else 0

    # Argument: any
    if args.any is not None:
        _any = 1 if args.any in "on" else 0

    # Argument: int 
    if args.int is not None:
        _int = 1 if args.int in "on" else 0

    # Argument: pc 
    if args.pc is not None:
        pc = 1 if args.pc in "on" else 0

    # Argument: edge 
    if args.edge is not None:
        edge = 1 if args.edge in "on" else 0

    # Argument: os 
    if args.os is not None:
        _os = 1 if args.os in "on" else 0

    # Argument: user 
    if args.user is not None:
        user = 1 if args.user in "on" else 0

    # Argument: umask 
    if args.umask is not None:
        if is_hex(args.umask):
            umask = int(args.umask, 16)
        elif is_int(args.umask):
            umask = int(args.umask, 10)
        else:
            sys.stderr.write("[WARNING] umask: " + args.umask + " is not a number!\n")
            exit(-1)

    # Argument: event 
    if args.event is not None:
        if is_hex(args.event):
            event = int(args.event, 16)
        elif is_int(args.event):
            event = int(args.event, 10)
        else:
            sys.stderr.write("[WARNING] event: " + args.event + " is not a number!\n")
            exit(-1)

    # Apply configurations
    for c in range(num_core):
        if core[c] is True:
            # ENABLE FIXED
            if fixed_counter is not None:
                reg_perf_global_ctrl = read_msr(IA32_PERF_GLOBAL_CTRL, c)
                reg_fixed_ctr_ctrl = read_msr(IA32_FIXED_CTR_CTRL, c)
                
                if fixed_counter is True:
                    reg_perf_global_ctrl = reg_perf_global_ctrl | CONF_ENABLE_FIXED
                    reg_fixed_ctr_ctrl = reg_fixed_ctr_ctrl | CONF_START_FIXED
                elif fixed_counter is False:
        			reg_perf_global_ctrl = reg_perf_global_ctrl & ~CONF_ENABLE_FIXED
        			reg_fixed_ctr_ctrl = reg_fixed_ctr_ctrl & ~CONF_START_FIXED
           
                write_msr(IA32_PERF_GLOBAL_CTRL, reg_perf_global_ctrl, c)
                write_msr(IA32_FIXED_CTR_CTRL, reg_fixed_ctr_ctrl, c)
            
            # ENABLE PMU
            if pmu_counter is not None:
                reg_perf_global_ctrl = read_msr(IA32_PERF_GLOBAL_CTRL, c)
                
                if pmu_counter is True:
                    reg_perf_global_ctrl = reg_perf_global_ctrl | CONF_ENABLE_PMU
                elif pmu_counter is False:
                    reg_perf_global_ctrl = reg_perf_global_ctrl & ~CONF_ENABLE_PMU
                
                write_msr(IA32_PERF_GLOBAL_CTRL, reg_perf_global_ctrl, c)

                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | CONF_EN_OS_USR
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | CONF_EN_OS_USR
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)
            
            # CMASK
            if args.cmask is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (cmask << 24)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (cmask << 24)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # INV
            if args.inv is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (inv << 23)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (inv << 23)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # EN
            if args.en is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (en << 22)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (en << 22)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # INT
            if args.int is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (_int << 20)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (_int << 20)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # PC
            if args.pc is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (pc << 19)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (pc << 19)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # EDGE
            if args.edge is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (edge << 18)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (edge << 18)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # OS
            if args.os is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (_os << 17)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (_os << 17)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # USER
            if args.os is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (user << 16)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (user << 16)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # UMASK
            if args.umask is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | (umask << 8)
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | (umask << 8)
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)

            # EVENT
            if args.event is not None:
                if args.pmu is None:
                    for j in range(num_pmu):
                        reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[j], c)
                        reg_ia32_perfevtselx = reg_ia32_perfevtselx | event
                        write_msr(IA32_PERFEVTSELX_ADDR[j], reg_ia32_perfevtselx, c)
                else:
                    reg_ia32_perfevtselx = read_msr(IA32_PERFEVTSELX_ADDR[pmu], c)
                    reg_ia32_perfevtselx = reg_ia32_perfevtselx | event
                    write_msr(IA32_PERFEVTSELX_ADDR[pmu], reg_ia32_perfevtselx, c)
